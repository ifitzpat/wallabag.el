#+TITLE: Wallabag.el
# This README template was copied from  org-ql's README.org. Credit goes to alphapapa.

[[https://wallabag.org/][Wallabag]] is a self-hostable bookmark manager that provides RSS feeds of your
bookmarks. With Wallabag.el you can quickly send urls to wallabag.

*Disclaimer:* wallabag is currently in alpha

* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 0 :ignore this :force depth
:END:
:CONTENTS:
- [[#features][Features]]
- [[#screenshots][Screenshots]]
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#changelog][Changelog]]
- [[#notes][Notes]]
:END:

* Features

+ Easily add links from [[https://github.com/skeeto/elfeed][elfeed]], eww, or whatever is at point to [[https://wallabag.org/][wallabag]]
+ Easily archive (mark as read) or delete articles, when browsing a wallabag feed in elfeed.

/Planned features & improvements:/

+ Article tagging (aligned with elfeed)
+ Better sync between elfeed & wallabag
  
* Screenshots

Coming soon

[[file:images/wallabag-demo.gif]]

* Installation
:PROPERTIES:
:TOC:      ignore-children
:END:

** Prerequisites

Create a client in your wallabag account and note down the =client_id= and =client_secret=.

[[https://doc.wallabag.org/img/user/browser_api_management.en.png]]

** Dependencies

 - [[https://github.com/tkf/emacs-request/tree/master][emacs-request]]

** Quelpa

The package =wallabag.el= is not currently available from [[https://melpa.org/#/org-ql][MELPA]], but can be installed
directly from github with [[https://framagit.org/steckerhalter/quelpa][Quelpa]].

Installing with [[https://framagit.org/steckerhalter/quelpa][Quelpa]] is easy:

1.  Install [[https://framagit.org/steckerhalter/quelpa-use-package#installation][quelpa-use-package]] (which can be installed directly from MELPA).
2.  Add this form to your init file:

#+BEGIN_SRC elisp
(use-package wallabag
  :quelpa (wallabag :fetcher github :repo "ifitzpat/wallabag.el.git")
  :config
  (setq wallabag-client-id "client-id-of-your-registered-app")
  (setq wallabag-client-secret "client-secret-of-your-registered-app")
  (setq wallabag-url "https://your-wallabag.domain")
  (setq wallabag-username "your-username")
  (setq wallabag-password "your-password")
  )
#+END_SRC

* Usage
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:
:CONTENTS:
- [[#commands][Commands]]
:END:

# These links work on GitHub's Org renderer but not in Org.

** Commands
:PROPERTIES:
:TOC:      ignore-children
:END:

+  *Add url (at-point) to wallabag:*
     - =wallabag-post-link=
+  *Add current url in eww to wallabag:*
     - =wallabag-eww-add-url=
+  *Add elfeed entry at point to wallabag from elfeed-search:*
     - =elfeed-search-wallabag-add=
+  *Add elfeed entry to wallabag from elfeed-show (when viewing an article):*
     - =elfeed-show-wallabag-add=
+  *Delete elfeed entry from wallabag from elfeed-show (when viewing an article in a
  wallabag RSS feed):*
     - =elfeed-show-wallabag-delete=
+  *Archive elfeed entry in wallabag from elfeed-show (when viewing an article in a
  wallabag RSS feed):*
     - =elfeed-show-wallabag-archive=


* Changelog
:PROPERTIES:
:TOC:      ignore-children
:END:

/Note:/ Breaking changes may be made before version 1.0, but in the event of major changes, attempts at backward compatibility will be made with obsolescence declarations, translation of arguments, etc.  Users who need stability guarantees before 1.0 may choose to use tagged stable releases.

** 0.0.1-alpha

Initial release

* Notes
:PROPERTIES:
:TOC:      ignore-children
:END:

** Known issues

** Credits

 - Credit to [[https://github.com/protesilaos][prot]] for the function to get eww's current url.
 - Credit to [[https://github.com/skeeto][skeeto]] for the excellent [[https://github.com/skeeto/elfeed][elfeed]] RSS reader.

   
* License
:PROPERTIES:
:TOC:      :ignore this
:END:

GPLv3

* COMMENT Code                                                     :noexport:
:PROPERTIES:
:TOC:      :ignore this
:END:

# The COMMENT keyword prevents GitHub's renderer from showing this entry.

Code used to update this document.

* COMMENT Export setup                                             :noexport:
:PROPERTIES:
:TOC:      :ignore this
:END:

# Copied from org-super-agenda's readme, in which much was borrowed from Org's =org-manual.org=.

#+OPTIONS: broken-links:t *:t

** Info export options

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Wallabag.el: (wallabag.el)

# NOTE: We could use these, but that causes a pointless error, "org-compile-file: File "..README.info" wasn't produced...", so we just rename the files in the after-save-hook instead.
# #+TEXINFO_FILENAME: wallabag.el.info
# #+EXPORT_FILE_NAME: wallabag.el.texi

** File-local variables

# NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub's org-ruby's HTML rendering, which does not respect noexport tags.  The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it.  So since these file-local variables don't affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it.  And since org-export does respect the noexport tag, the tree is excluded from the info page.

# Local Variables:
# before-save-hook: org-make-toc
# after-save-hook: (lambda nil (when (and (require 'ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file "README.texi") (rename-file "README.info" "org-ql.info" t)))
# org-export-initial-scope: buffer
# org-comment-string: "NOTCOMMENT"
# End:
